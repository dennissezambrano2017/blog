export const blogList = [
    {
      id: 1,
      title: 'Introducción a la Computación Distribuida',
      category: 'Computación Distribuida',
      subCategory: ['Arquitectura', 'Fundamentos', 'Introducción'],
      description:
        "La computación distribuida es un modelo para resolver problemas de computación masiva utilizando un gran número de ordenadores organizados en clústeres incrustados en una infraestructura de telecomunicaciones distribuida.",
      authorName: 'RICARDO TURRIAGO',
      authorAvatar: '/assets/images/turriago.jpg',
      createdAt: '3 de junio/2022',
      cover: '/assets/images/apps1.jpg',
    },
    {
      id: 2,
      title: 'Paradigmas de las Aplicaciones Distribuidas',
      category: 'Paradigmas',
      subCategory: ['Paralelo', 'Aplicaciones', 'Sistema'],
      description:
        "Un paradigma de programación es una manera o estilo de programación de software. Existen diferentes formas de diseñar un lenguaje de programación y varios modos de trabajar para obtener los resultados que necesitan los programadores. En las aplicaciones distribuidas, existen los paradigmas 'Sistema de Colas de Mensaje', los llamados 'Agentes Móviles', los 'Servicios de red' y el 'Espacio de objeto'.",
      authorName: 'PAOLA ZAMBRANO',
      authorAvatar: '/assets/images/paola.jpeg',
      createdAt: '3 de junio/2022',
      cover: '/assets/images/apps2.png',
    },
    {
      id: 3,
      title: 'El Protocolo TCP/IP',
      category: 'Cliente/Servidor',
      subCategory: ['Protocolo', 'Modelos', 'Lógica'],
      description:
        "Los protocolos son conjuntos de normas para formatos de mensaje y procedimientos que permiten a las máquinas y los programas de aplicación intercambiar información. Cada máquina implicada en la comunicación debe seguir estas normas para que el sistema principal de recepción pueda interpretar el mensaje. El conjunto de protocolos TCP/IP puede interpretarse en términos de capas (o niveles). Esta figura muestra las capas del protocolo TCP/IP. Empezando por la parte superior son: capa de aplicación, capa de transporte, capa de red, capa de interfaz de red y hardware.",
      authorName: 'LIN SALINAS',
      authorAvatar: '/assets/images/salinas.jpeg',
      createdAt: '14 de junio/2022',
      cover: '/assets/images/apps3.jpg',
    },
    {
      id: 4,
      title: 'La Red, el Cliente y el Servidor',
      category: 'Cliente/Servidor',
      subCategory: ['Informática', 'Multicapa', 'Arquitectura'],
      description:
        "En las redes estructuradas bajo el modelo cliente servidor, los clientes centralizan diferentes aplicaciones y recursos en el servidor. El servidor, a su vez, se encarga de que estos recursos estén disponibles cada vez que un cliente los requiere.",
      authorName: 'LIN SALINAS',
      authorAvatar: '/assets/images/salinas.jpeg',
      createdAt: '14 de junio/2022',
      cover: '/assets/images/apps4.png',
    },
    {
      id: 5,
      title: 'El Protocolo UDP',
      category: 'Protocolos',
      subCategory: ['Modelos', 'Lógica', 'Datagramas'],
      description:
        "El protocolo UDP (Datagramas de usuario), es aquel que permite la transmisión de información sin conexión de los datagramas que están basados en protocolos IP, si bien este protocolo no es conocido como el TCP/IP, se clasifica en el nivel de transporte y, en consecuencia, se encuentra en una capa intermedia entre la capa de red y la capa de aplicación.",
      authorName: 'RICARDO TURRIAGO',
      authorAvatar: '/assets/images/turriago.jpg',
      createdAt: '14 de junio/2022',
      cover: '/assets/images/apps5.jpg',
    },
    {
      id: 6,
      title: 'Los Sockets (Java)',
      category: 'Java',
      subCategory: ['Comunicación', 'Flujos', 'Streams'],
      description:
        "Los Sockets son puntos finales de enlaces de comunicaciones entre procesos. Los procesos los tratan como descriptores de ficheros, de forma que se pueden intercambiar datos con otros procesos transmitiendo y recibiendo a través de sockets. El tipo de sockets describe la forma en la que se transfiere información a través de ese socket.",
      authorName: 'RICARDO TURRIAGO',
      authorAvatar: '/assets/images/turriago.jpg',
      createdAt: '14 de junio/2022',
      cover: '/assets/images/apps6.jpg',
    },
    {
      id: 7,
      title: 'Los Web Sockets (Java)',
      category: 'Java',
      subCategory: ['Comunicación', 'Flujos', 'Streams'],
      description:
        "Para entender los Web Sockets, son considerados como una conexión bidireccional punto a punto entre un navegador y su servidor, de tal manera que ambas partes se puedan enviar mensajes. Para la parte del cliente no resulta ninguna innovación pero para la parte del servidor sí ya que permite enviar información al cliente sin obligar a este a realizar peticiones AJAX cada x segundos.",
      authorName: 'PAOLA ZAMBRANO',
      authorAvatar: '/assets/images/paola.jpeg',
      createdAt: '21 de junio/2022',
      cover: '/assets/images/apps7.jpg',
    },
    {
      id: 8,
      title: 'Los Web Sockets (Java)',
      category: 'Java',
      subCategory: ['Comunicación', 'Flujos', 'Streams'],
      description:
        "Para entender los Web Sockets, son considerados como una conexión bidireccional punto a punto entre un navegador y su servidor, de tal manera que ambas partes se puedan enviar mensajes. Para la parte del cliente no resulta ninguna innovación pero para la parte del servidor sí ya que permite enviar información al cliente sin obligar a este a realizar peticiones AJAX cada x segundos.",
      authorName: 'PAOLA ZAMBRANO',
      authorAvatar: '/assets/images/paola.jpeg',
      createdAt: '21 de junio/2022',
      cover: '/assets/images/apps7.jpg',
    },
    {
      id: 9,
      title: 'Los Web Sockets (Java)',
      category: 'Java',
      subCategory: ['Comunicación', 'Flujos', 'Streams'],
      description:
        "Para entender los Web Sockets, son considerados como una conexión bidireccional punto a punto entre un navegador y su servidor, de tal manera que ambas partes se puedan enviar mensajes. Para la parte del cliente no resulta ninguna innovación pero para la parte del servidor sí ya que permite enviar información al cliente sin obligar a este a realizar peticiones AJAX cada x segundos.",
      authorName: 'PAOLA ZAMBRANO',
      authorAvatar: '/assets/images/paola.jpeg',
      createdAt: '21 de junio/2022',
      cover: '/assets/images/apps7.jpg',
    },
    {
      id: 10,
      title: 'Los Web Sockets (Java)',
      category: 'Java',
      subCategory: ['Comunicación', 'Flujos', 'Streams'],
      description: "WebSocket es una tecnología que proporciona un canal de comunicación bidireccional y full-duplex sobre un único socket TCP. Está diseñada para ser implementada en navegadores y servidores web, pero puede utilizarse por cualquier aplicación cliente/servidor.",
      description2: "WebSocket es una tecnología que proporciona un canal de comunicación bidireccional y full-duplex sobre un único socket TCP. Está diseñada para ser implementada en navegadores y servidores web, pero puede utilizarse por cualquier aplicación cliente/servidor. La API de WebSocket está siendo normalizada por el W3C, mientras que el protocolo WebSocket ya fue normalizado por la IETF como el RFC 6455. Debido a que las conexiones TCP comunes sobre puertos diferentes al 80 son habitualmente bloqueadas por los administradores de redes, el uso de esta tecnología proporcionaría una solución a este tipo de limitaciones proveyendo una funcionalidad similar a la apertura de varias conexiones en distintos puertos, pero multiplexando diferentes servicios WebSocket sobre un único puerto TCP. En el lado del cliente, WebSocket está ya implementado en Mozilla Firefox 8, Google Chrome 4 y Safari 5, así como la versión móvil de Safari en el iOS 4.2,1​ y en Internet Explorer 10. La implementación de cliente del protocolo WebSocket intenta detectar si el agente de usuario está configurado para utilizar un proxy a la hora de conectar a un host y puerto remoto, y si es así, utiliza el método HTTP CONNECT para establecer un túnel persistente. Aunque el protocolo WebSocket es indiferente a la conexión sobre servidores proxy o cortafuegos, implementa una negociación compatible con HTTP para que los servidores HTTP puedan compartir sus puertos HTTP y HTTPS por defecto (80 y 443) con una pasarela o servidor WebSocket. El protocolo WebSocket define un prefijo ws:// y wss:// para indicar una conexión WebSocket y Websocket Secure, respectivamente. Ambos esquemas utilizan un mecanismo HTTP upgrade para actualizar al protocolo WebSocket.",
      authorName: 'PAOLA ZAMBRANO',
      authorAvatar: '/assets/images/paola.jpeg',
      createdAt: '21 de junio/2022',
      cover: '/assets/images/Semana6_1.jpg',
      refer: ['https://developer.mozilla.org/es/docs/Web/API/WebSockets_API', 'https://socket.io/docs/v4/'],
      imgs: ['/assets/images/Semana6_2.jpg', '/assets/images/Semana6_3.jpg', '/assets/images/Semana6_4.jpg'],
    },
    {
      id: 11,
      title: 'Objetos distribuidos en Java: RPC',
      category: 'Java',
      subCategory: ['Comunicación', 'Flujos'],
      description: "En computación distribuida, la llamada a procedimiento remoto es un programa que utiliza una computadora para ejecutar código en otra máquina remota sin tener que preocuparse por las comunicaciones entre ambas, de forma que parezca que se ejecuta en local.",
      description2: "En computación distribuida, la llamada a procedimiento remoto es un programa que utiliza una computadora para ejecutar código en otra máquina remota sin tener que preocuparse por las comunicaciones entre ambas, de forma que parezca que se ejecuta en local. El protocolo que se utiliza para esta llamada es un gran avance sobre los sockets de Internet usados hasta el momento. De esta manera el programador no tenía que estar pendiente de las comunicaciones, estando estas encapsuladas dentro de las RPC. Una llamada a procedimiento es muy similar a una invocación a un método remoto en la que un programa cliente llama a un procedimiento de otro programa en ejecución en un proceso servidor. Los servidores pueden ser clientes de otros servidores para permitir cadenas de RPC. Un proceso servidor define en su interfaz de servicio los procedimientos disponibles para ser llamados remotamente. RPC se implementa usualmente sobre protocolo petición-respuesta, que se encuentra simplificado por omisión de de referencias a objetos remotos en la parte de los mensajes de petición. Las RPC son muy utilizadas dentro de la comunicación cliente-servidor. Siendo el cliente el que inicia el proceso solicitando al servidor que ejecute cierto procedimiento o función y enviando este de vuelta el resultado de dicha operación al cliente. El cliente que accede a un servicio incluye un procedimiento de resguardo para cada procedimiento en la interfaz de servicio. El papel de un procedimiento de resguardo es similar al de un proxy. Se comporta como un procedimiento local del cliente pero en lugar de ejecutar la llamada, empaqueta el identificador del procedimiento y los argumentos en un mensaje de petición que se envía vía su módulo de comunicación al servidor; cuando llega el mensaje de respuesta, desempaqueta los resultados.",
      authorName: 'PAOLA ZAMBRANO',
      authorAvatar: '/assets/images/paola.jpeg',
      createdAt: '06 de septiembre/2022',
      cover: '/assets/images/Semana7_1.jpg',
      refer: ['https://www.ibm.com/docs/es/radfws/9.6.1?topic=applications-jax-rpc-jsr-101', 'https://www.ibm.com/docs/es/rsm/7.5.0?topic=standards-jax-rpc'],
      imgs: ['/assets/images/Semana7_2.jpg', '/assets/images/Semana7_3.jpg'],
    },
    {
      id: 12,
      title: 'Objetos distribuidos en Java: RMI',
      category: 'Java',
      subCategory: ['Comunicación', 'Flujos'],
      description: "RMI es un mecanismo que permite realizar llamadas a métodos de objetos remotos situados en distintas (o la misma) máquinas virtuales Java, compartiendo así recursos y carga de procesamiento a través de varios sistemas.",
      description2: "RMI es un mecanismo que permite realizar llamadas a métodos de objetos remotos situados en distintas (o la misma) máquinas virtuales Java, compartiendo así recursos y carga de procesamiento a través de varios sistemas. Permite exportar objetos como objetos remotos para que otro proceso remoto pueda acceder directamente como un objeto Java. Todos los objetos de una aplicación distribuida basada en RMI deben ser implementados en Java. Esta es una de las principales ventajas de RMI, ya que RMI forma parte del API de Java, con lo que la integración de objetos remotos en aplicaciones distribuidas se realiza sin necesidad de usar recursos adicionales (como por ejemplo un lenguaje de descripción de interfaces o IDL). De hecho, se utiliza la misma sintaxis para una llamada a un objeto remoto o un objeto local. El cliente invoca a los objetos remotos mediante la interfaz remota. Un servicio de nombres (registro RMI) reside en el host proporcionando el mecanismo que el cliente usa para encontrar uno más servidores iniciales RMI. La interacción con el objeto remoto se lleva a cabo a través de la interfaz remota. Esencialmente, ésta describe los métodos que pueden ser invocados de forma remota, y que el objeto remoto implementa. Cuando se obtiene una referencia a un objeto remoto, el objeto no se envía a través de la red al cliente que lo solicita. En su lugar se genera un objeto proxy o stub que constituye el proxy de la parte del cliente del objeto remoto. Todas las interacciones del cliente se realizarán con esta clase stub, la cual es responsable de gestionar los datos entre el sistema local y el remoto. Muchos clientes pueden tener referencias a un único objeto remoto. Cada cliente tiene su propio objeto stub que representa al objeto remoto, pero dicho objeto remoto NO se replica. En la parte del servidor, una clase skeleton es la responsable de gestionar las llamadas al método y los datos enviados al objeto real referenciado. Éste es el proxy de la parte del servidor para el objeto remoto.",
      authorName: 'LIN SALINAS',
      authorAvatar: '/assets/images/salinas.jpeg',
      createdAt: '06 de septiembre/2022',
      cover: '/assets/images/Semana8_1.jpg',
      refer: ['http://www.jtech.ua.es/j2ee/2003-2004/modulos/rmi/sesion01-apuntes.htm', 'http://www.jtech.ua.es/historico/paj/restringido/apuntes/sesion13-apuntes.htm'],
      imgs: ['/assets/images/Semana8_2.jpg', '/assets/images/Semana8_3.jpg', '/assets/images/Semana8_4.jpg'],
    },
    {
      id: 13,
      title: 'Comparativa entre RMI y RPC ',
      category: 'Java',
      subCategory: ['Comunicación', 'Flujos'],
      description: "La llamada a procedimiento remoto (RPC) es una función de lenguaje de programación diseñada para la computación distribuida y basada en la semántica de las llamadas a procedimientos locales.",
      description2: "La llamada a procedimiento remoto (RPC) es una función de lenguaje de programación diseñada para la computación distribuida y basada en la semántica de las llamadas a procedimientos locales . Es la forma más común de servicio remoto y se diseñó como una forma de abstraer el mecanismo de llamada de procedimiento para usar entre sistemas conectados a través de una red. Es similar al mecanismo de IPC en el que el sistema operativo permite que los procesos gestionen los datos compartidos y se ocupen de un entorno en el que los diferentes procesos se ejecutan en sistemas separados y necesariamente requieren comunicación basada en mensajes. La invocación de método remoto (RMI) es similar a RPC pero es específica del idioma y una característica de Java. Se permite que un hilo llame al método en un objeto remoto. Para mantener la transparencia en el lado del cliente y del servidor, implementa objetos remotos utilizando apéndices y esqueletos. El código auxiliar reside en el cliente y, para el objeto remoto, se comporta como un proxy. Cuando un cliente llama a un método remoto, se llama al código auxiliar del método remoto. El talón del cliente es responsable de crear y enviar el paquete que contiene el nombre de un método y los parámetros calculados, y el esqueleto es responsable de recibir el paquete. Diferencias clave entre RPC y RMI. 1) RPC admite los paradigmas de programación de procedimientos, por lo tanto, está basado en C, mientras que RMI admite paradigmas de programación orientados a objetos y está basado en Java. 2) Los parámetros pasados ​​a procedimientos remotos en RPC son las estructuras de datos ordinarias. Por el contrario, RMI transita objetos como un parámetro al método remoto. 3) RPC se puede considerar como la versión anterior de RMI, y se usa en los lenguajes de programación que admiten la programación de procedimientos, y solo se puede usar el método de paso por valor. A diferencia de lo anterior, la facilidad de RMI está diseñada en base a un enfoque de programación moderno, que podría usar el paso por valor o referencia. Otra ventaja de RMI es que los parámetros pasados ​​por referencia se pueden cambiar. 4) El protocolo RPC genera más gastos generales que RMI. 5) Los parámetros pasados ​​en RPC deben ser in-out, lo que significa que el valor pasado al procedimiento y el valor de salida deben tener los mismos tipos de datos. En contraste, no hay obligación de pasar parámetros de entrada-salida en RMI.",
      authorName: 'LIN SALINAS',
      authorAvatar: '/assets/images/salinas.jpeg',
      createdAt: '06 de septiembre/2022',
      cover: '/assets/images/Semana8_5.jpg',
      refer: ['https://www.ibm.com/docs/es/was-nd/8.5.5?topic=rpc-rmi-iiop-using-jax', 'https://www.ibm.com/docs/es/was/9.0.5?topic=rpc-rmi-iiop-using-jax'],
      imgs: ['/assets/images/Semana8_6.jpg', '/assets/images/Semana8_7.jpg', '/assets/images/Semana8_8.jpg'],
    },
  ];
  